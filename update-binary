#!/sbin/sh
#
# xEdify binary for Android Recovery (TWRP)
# Based on Unix-Shell script (bash)
# Version: 0.1 beta
#
# Created by blackeangel (PayPal blackeangel)
# Edited by Octanium (www.patreon.com/octanium)
#

#Declare variables
export UPD_ZIP="$3"
export UPD_INTERFACE="/proc/$$/fd/$2"
export RECOVERY_SCRIPT_FD=$2
export UPD_TEMP_FOLDER=/tmp
export ZIP_TEMP_FOLDER=/zip_tmp
set -o pipefail

#Declare functions
#Setup progress bar
progress() {
if [ $# != 2 ]
then echo "$0 expects 2 args, got $#";
  echo "usage: $0 <fraction> <duration>";
else
 if [ $UPD_INTERFACE != "" ];then
 echo "progress ${1} ${2} " 1>&$UPD_INTERFACE;
 fi;
fi
}

#Show progress bar
show_progress() {
progress $@
}

#Set progress bar
set_progress() {
if [ $# != 1 ]
then echo "$0 expects 1 args, got $#";
  echo "usage: $0 <fraction>";
else 
 if [ $UPD_INTERFACE != "" ]; then
 echo "set_progress ${1} " 1>&$UPD_INTERFACE;
 fi;
fi
}

#Show message
ui_print() {
if [ $UPD_INTERFACE != "" ]; then
  echo "ui_print $* " 1>&$UPD_INTERFACE;
  echo "ui_print " 1>&$UPD_INTERFACE;
else
  echo "$*";
fi;
}

#Copy file
package_extract_file(){
if [ $# != 2 ] 
 then echo "$0 expects 2 args, got $#";
  echo "usage: $0 <src-file> <dst-file>";
else unzip -p $UPD_ZIP $1 > $2;
fi
}

#Copy folder
package_extract_folder(){
if [ -d $UPD_ZIP_TEMP_FOLDER ] 
 then rm -rf $UPD_ZIP_TEMP_FOLDER
fi
if [ $# != 2 ] 
 then echo "$0 expects 2 args, got $#"; echo "usage: $0 <src-dir> <dst-dir>";
else mkdir -p ZIP_TEMP_FOLDER
  unzip $UPD_ZIP $1/* -d $UPD_ZIP_TEMP_FOLDER;
  mv $UPD_ZIP_TEMP_FOLDER/$1 $2
fi
}

#Set permission
set_perm() {
if [ $# != 2 ] 
 then echo "$0 expects 4 args, got $#";
  echo "usage: $0 <uid> <gid> <mode> <pathtofile>[, ... pathtofileN]";
else
 us=$(id -u $1)
 gr=$(id -g $2)
 mode=$3
 shift 3
 for item in "$*"; do
     chown ${us}.${gr} $item
     chown ${us}:${gr} $item
     chmod $mode $item
 done
fi
}
stdout_to_ui_print() {
while read -r line; do
ui_print "$line"
done
}
to_ui_print() {
eval "$*" | stdout_to_ui_print
}
getprop(){
bp=/system/build.prop
if [ -f "$bp" ]; then
 grep "$1" $bp | sed 's/.*=//'
 else
 echo "System not installed!"
fi
}

#Set prop value
setprop(){
bp=/system/build.prop
if [ -f "$bp" ]; then
par=$(echo -n $1 | sed -r 's/=.+//')
  if grep -q "$par" $bp; then
      sed -i "s/$par=.*/$1/g" $bp
  else
      echo "$1" >> $bp
  fi
else
echo "System not installed!"
exit
fi
}

#Set permission recursive
set_perm_recursive() {
 for i in "$7"/* ; do
if [ -d "$i" ]; then
 set_perm_recursive ${@:1:6} $i
 chmod $3 "$i"
 chown $1:$2 "$i"
elif [ -f "$i" ]; then
 chmod $4 "$i"
 chown $5:$6 "$i"
fi
done
chmod $3 "$7"
chown $1:$2 "$7"
}
is_mounted() {
if [ ! -z "$2" ]; then
  cat /proc/mounts | grep $1 | grep $2, >/dev/null
else
  cat /proc/mounts | grep $1 >/dev/null
fi
return $?
}

#Set wipe
wipe(){
if [ $1 == "dalvik" ]; then
if (! is_mounted /data rw); then mount -o rw,remount /data; fi
if (! is_mounted /data rw); then mount -o rw,remount /data /data; fi
rm -rf /data/dalvik-cache/*
fi
if [ $1 == "data" ]; then
if (! is_mounted /data rw); then mount -o rw,remount /data; fi
if (! is_mounted /data rw); then mount -o rw,remount /data /data; fi
find data/* -! -regex 'data/media.*' -delete
fi
if [ $1 == "caches" ]; then
if (! is_mounted /data rw); then mount -o rw,remount /data; fi
if (! is_mounted /data rw); then mount -o rw,remount /data /data; fi
if (! is_mounted /cache rw); then mount -o rw,remount /cache; fi
if (! is_mounted /cache rw); then mount -o rw,remount /cache /cache; fi
 rm -rf /data/dalvik-cache/*
 rm -rf /cache/*
fi
if [ $1 == "system" ]; then
if (! is_mounted /system rw); then mount -o rw,remount /system; fi
if (! is_mounted /system rw); then mount -o rw,remount /system /system; fi
rm -rf /system/*
fi
if [ $1 == "cache" ]; then
if (! is_mounted /cache rw); then mount -o rw,remount /cache; fi
if (! is_mounted /cache rw); then mount -o rw,remount /cache /cache; fi
 rm -rf /cache/*
fi
if [ $1 == "userdata" ]; then
if (! is_mounted /data rw); then mount -o rw,remount /data; fi
if (! is_mounted /data rw); then mount -o rw,remount /data /data; fi
rm -rf /data/*
fi
}
remount_system_rw() {
if (! is_mounted /system rw); then mount -o rw,remount /system; fi
if (! is_mounted /system rw); then mount -o rw,remount /system /system; fi
}

#Install boot
install_boot() {
if [ -z "$BOOTIMAGE" ]; then
 for PARTITION in kern-a KERN-A android_boot ANDROID_BOOT kernel KERNEL boot BOOT lnx LNX; do
    BOOTIMAGE=$(readlink /dev/block/by-name/$PARTITION || readlink /dev/block/platform/*/by-name/$PARTITION || readlink /dev/block/platform/*/*/by-name/$PARTITION)
    if [ ! -z "$BOOTIMAGE" ]; then break; fi
 done
fi
unzip -o "$UPD_ZIP" boot.img -d "/tmp/"
dd if=/tmp/boot.img of=$BOOTIMAGE
rm /tmp/boot.img
}

#Set symlink
symlink(){
ln -s $1 $2
}

#Delete file\folder
delete(){
rm -f $1
}

#Delete file\folder reursive
delete_reursive(){
rm -rf $1
}
ui_print;
if [ "$UPD_ZIP" == "/tmp/update.zip" ]; then
 ui_print "Can not run in sideload mode"
 exit 1
fi
if [ -d $UPD_TEMP_FOLDER ]
 then rm -rf $UPD_TEMP_FOLDER
fi
mkdir -p $UPD_TEMP_FOLDER
package_extract_file META-INF/com/google/android/updater-script $UPD_TEMP_FOLDER/updater-script || ui_print "Can not extract updater-script. Do you have it in package?"
chmod 777 $UPD_TEMP_FOLDER/updater-script
#Processing updater-script
. $UPD_TEMP_FOLDER/updater-script $@
exit $?

